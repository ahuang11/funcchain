{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#concepts-overview","title":"Concepts Overview","text":"name description chain Main funcchain to get responses from the assistant achain Async version of chain settings Global settings object BaseModel Pydantic model base class"},{"location":"concepts/#chain","title":"chain","text":"<p>The <code>chain</code> function is the main interface to get responses from the assistant. It handles creating the prompt, querying the model, and parsing the response.</p> <p>Key things:</p> <ul> <li>Takes instruction and system prompt strings to create the prompt</li> <li>Automatically extracts docstring of calling function as instruction</li> <li>Gets output parser based on return type annotation</li> <li>Supports OpenAI Functions under the hood</li> <li>Retries on parser failure</li> <li>Logs tokens usage</li> </ul> <p>Usage:</p> <pre><code>from funcchain import chain\n\n\ndef get_weather(city: str) -&gt; str:\n    \"\"\"\n    Get the weather for {city}.\n    \"\"\"\n    return chain()\n\nprint(get_weather(\"Barcelona\"))\n</code></pre>"},{"location":"concepts/#achain","title":"achain","text":"<p>The <code>achain</code> function is an async version of <code>chain</code> that can be awaited.</p> <p>Usage:</p> <pre><code>from funcchain import achain\nimport asyncio\n\n\nasync def get_weather(city: str) -&gt; str:\n    \"\"\"\n    Get the weather for {city}.\n    \"\"\"\n    return await achain()\n\n\nprint(asyncio.run(get_weather(\"Barcelona\")))\n</code></pre>"},{"location":"concepts/#settings","title":"settings","text":"<p>The <code>settings</code> object contains global settings for funcchain.</p> <p>Key attributes:</p> <ul> <li><code>LLM</code>: Configures the default LLM</li> <li><code>MAX_TOKENS</code>: Max tokens per request</li> <li><code>DEFAULT_SYSTEM_PROMPT</code>: Default system prompt</li> <li><code>OPENAI_API_KEY</code>: OpenAI API key</li> <li><code>model_kwargs()</code>: kwargs for model like temperature</li> </ul> <p>Usage:</p> <pre><code>from funcchain import settings\n\nsettings.LLM = MyCustomLLM()\nsettings.MAX_TOKENS = 2048\n</code></pre>"},{"location":"concepts/#basemodel","title":"BaseModel","text":"<p><code>BaseModel</code> is the Pydantic model base class used to define output schemas.</p> <p>Funcchain can automatically parse responses to Pydantic models.</p> <p>Usage:</p> <pre><code>from funcchain import chain\nfrom langchain.pydantic_v1 import BaseModel, Field\n\n\nclass Article(BaseModel):\n    title: str = Field(..., description=\"Title of the article\")\n    description: str = Field(\n        ..., description=\"Description of the content of the article\"\n    )\n\n\ndef summarize(text: str) -&gt; Article:\n    \"\"\"\n    Summarize the text into an Article:\n    {text}\n    \"\"\"\n    return chain()\n\n\nprint(\n    summarize(\n        \"\"\"\n        AI has the potential to revolutionize education, offering personalized and individualized teaching, and improved learning outcomes. AI can analyze student data and provide real-time feedback to teachers and students, allowing them to adjust their teaching and learning strategies accordingly. One of the biggest benefits of AI in education is the ability to provide personalized and individualized teaching. AI can analyze student data and create a personalized learning plan for each individual student, taking into account their strengths, weaknesses, and learning styles. This approach has the potential to dramatically improve learning outcomes and engagement. The potential of AI in education is enormous, and it is expected to revolutionize the way we approach degree and diploma programs in the future. AI-powered technologies can provide students with real-time feedback, help them to stay on track with their studies, and offer a more personalized and engaging learning experience.\n        \"\"\"\n    )\n)\n</code></pre>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<p>The <code>chain()</code> function allows you to call a prompt like a regular Python function. The docstring serves as the instructions and the return type annotation determines the output parsing.</p> <pre><code>from funcchain import chain\n\ndef hello_world() -&gt; str:\n    \"\"\"\n    Generate a friendly hello world message.\n    \"\"\"\n    return chain()\n\nprint(hello_world())\n</code></pre> <p>This will send the docstring to the AI assistant and parse the response as a string.</p>"},{"location":"examples/#pydantic-models","title":"Pydantic Models","text":"<p>You can use Pydantic models to validate the response.</p> <pre><code>from funcchain import chain\nfrom langchain.pydantic_v1 import BaseModel\n\n\nclass Message(BaseModel):\n    text: str\n\n\ndef hello_message() -&gt; Message:\n    \"\"\"\n    Generate a message object that says hello.\n    \"\"\"\n    return chain()\n\n\nprint(hello_message())\n</code></pre> <p>Now the response will be parsed as a Message object.</p>"},{"location":"examples/#asynchronous-support","title":"Asynchronous Support","text":"<p>Async functions are also supported with <code>achain()</code>:</p> <pre><code>import asyncio\nfrom funcchain import achain\n\nasync def async_hello() -&gt; str:\n    \"\"\"Say hello asynchronously\"\"\"\n    return await achain()\n\nprint(asyncio.run(async_hello()))\n</code></pre> <p>This allows you to easily call AI functions from async code.</p> <p>The funcchain project makes it really simple to leverage large language models in your Python code! Check out the source code for more examples.</p>"},{"location":"examples/#advanced-examples","title":"Advanced Examples","text":"<p>For advanced examples, checkout the examples directory here</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#welcome","title":"Welcome","text":"<p>funcchain is the most pythonic way of writing cognitive systems. Leveraging pydantic models as output schemas combined with langchain in the backend allows for a seamless integration of llms into your apps. It works perfect with OpenAI Functions and soon with other models using JSONFormer.</p> <p>Key features:</p> <ul> <li>increased productivity</li> <li>prompts as Python functions</li> <li>pydantic models as output schemas</li> <li>langchain schemas in the backend</li> <li>fstrings or jinja templates for prompts</li> <li>fully utilises OpenAI Functions</li> <li>minimalistic and easy to use</li> </ul>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>funcchain requires python 3.10+</p> <pre><code>pip install funcchain\n</code></pre> <p>Make sure to have an OpenAI API key in your environment variables. For example,</p> <pre><code>export OPENAI_API_KEY=sk-...\n</code></pre>"},{"location":"getting_started/#usage","title":"Usage","text":"<pre><code>from funcchain import chain\n\ndef hello() -&gt; str:\n    \"\"\"Say hello in 3 languages\"\"\"\n    return chain()\n\nprint(hello())\n</code></pre> <p>This will call the OpenAI API and return the response.</p> <p>The <code>chain</code> function extracts the docstring as the prompt and the return type for parsing the response.</p>"},{"location":"getting_started/#contributing","title":"Contributing","text":"<p>To contribute, clone the repo and run:</p> <pre><code>./dev_setup.sh\n</code></pre> <p>This will install pre-commit hooks, dependencies and set up the environment.</p> <p>To activate the virtual environment managed by poetry, you can use the following command:</p> <pre><code>poetry shell\n</code></pre>"}]}